<style lang="less">
.footer {
  height: 100rpx;
}
.classify {
  display: flex;
  position: relative;
  justify-content: center;
  align-items: center;
  .classify_catetory {
    width: 200rpx;
    position: relative;
    .name {
      text-align: center;
      height: 100rpx;
      line-height: 100rpx;
      font-size: 28rpx;
      color: #666;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
    .active {
      border-left: 6rpx solid #ff6a3c;
      background: #fff;
      color: #ff6a3c;
    }
    .add_cuisine {
      margin-left: 23rpx;
    }
  }
  .classify_detail {
    position: relative;
    // margin-left: -15rpx;
    background: #fff;
    padding: 15px 10px 10px 30px;
    width: 100%;
    .add_recipe {
      margin-bottom: 10rpx;
    }
    .title {
      font-size: 30rpx;
      color: #333;
      margin-left: 25rpx;
    }
    .children {
      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;
    }
    .children_item {
      height: 200rpx;
      width: 100%;
      text-align: center;
      margin: 20rpx 0 rpx;
      display: flex;
      justify-content: space-between;
      align-items: center;
      .child_image {
        width: 80px;
        height: 80px;
      }
      .child_name {
        font-size: 26rpx;
        color: #666;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: 170rpx;
      }
    }
  }
}
</style>

<template>

<van-search
  value="{{ value }}"
  placeholder="请输入搜索关键词"
  show-action
  bind:search="search"
  bind:cancel="searchCancel"
  bind:change="search"
/>

<div class="classify">
  <scroll-div class="classify_catetory" scroll-y scroll-with-animation="true">
    <div class="name" :class="{ 'active': cuisine.active }" v-for="(cuisine, idx) in cuisineList" @tap="selectCuisine" id="{{idx}}">
      {{cuisine.name}}
    </div>
    <van-button input-width="80rpx" class="add_cuisine" icon="plus" type="default" bind:click="openModel"></van-button>
  </scroll-div>
  <scroll-div class="classify_detail" scroll-y scroll-with-animation="true">
      <div class="children">
        <!-- 添加菜谱 -->
        <van-button size="large" input-width="80rpx" class="add_recipe" icon="plus" type="primary" bind:click="addRecipe">添加菜谱</van-button>
        <view class="children_item" v-for="(recipe, idx) in showRecipeList">
          <navigator hover-class="none" url="/pages/recipe?recipe_id={{recipe.id}}">
            <image class="child_image" src="{{recipe.image_url}}"></image>
          </navigator>
          <div class="child_name">{{recipe.name}}</div>
          <van-stepper value="{{ 1 }}" min="0" data-cuisine-id="{{recipe.cuisine_id}}" data-recipe-id="{{recipe.id}}" bind:change="stepperChange" />
        </view>
      </div>
  </scroll-div>
</div>

<div class="footer">
  <van-goods-action>
    <van-goods-action-icon
      icon="cart-o"
      text="订单"
      bind:click="onClickIcon"
    />
    <van-goods-action-button
      text="结算食材"
      bind:click="onClickButton"
    />
  </van-goods-action>
</div>

<!-- 添加菜系模态框 -->
<modal class="modal" v-if="addCuisineModalShow" no-cancel bindconfirm="addCuisine">
  <van-cell-group>
    <van-field
      placeholder="请输入菜系名称"
      border="{{ false }}"
      bind:change="changeCuisineName"
    />
  </van-cell-group>
</modal>

</template>


<script>
import wepy from '@wepy/core';
import store from '@/store'
import { mapMutations, mapGetters } from '@wepy/x'
import { putCuisine, getCuisines } from '@/api/cuisine'
import { putRecipeImage } from '@/api/recipe'

wepy.page({
  data: {
    value: '',
    cuisineName: '',
    addCuisineModalShow: false,
  },
  store,
  computed: {
    ...mapGetters(['cuisineList','showRecipeList'])
  },

  async onLoad() {
    try {
      await this.$store.dispatch('initCuisine')
      this.$app.$options.globalData.cuisineList = this.cuisineList.slice()
    } catch (err) {
      console.error(err)
    }
  },

  methods: {
    ...mapMutations(['setCuisineList']),
    search (e) {
      let searchString = e.$wx.detail
      if (searchString === '')
        this.setCuisineList(this.$app.$options.globalData.cuisineList)
      let cuisineList = this.cuisineList.map(cuisine => {
        // 使用扩展运算符创建 recipes 的浅拷贝
        let recipes = [...cuisine.recipes].filter(recipe => recipe.name.includes(searchString));
        return { ...cuisine, recipes };
      })
      this.setCuisineList(cuisineList)
    },
    searchCancel () {
      this.setCuisineList(this.$app.$options.globalData.cuisineList)
    },
    openModel () {
      this.addCuisineModalShow = true
    },
    changeCuisineName (e) {
      this.cuisineName = e.$wx.detail
    },
    async afterRead(event) {
      const { file } = event.$wx.detail;
      try {
        const recipeResponse = await putRecipeImage(file.url, 'name', {user: 'test'})
        const { fileList = [] } = recipeResponse.data;
        fileList.push({ ...file, url: res.data });
        this.fileList = fileList
      } catch (err) {
        console.error(err)
      }
    },
    async addCuisine () {
      if (this.cuisineName !== '') {
        try {
          const resData = await putCuisine(this.cuisineName)
          if (resData.data.cuisine_name !== undefined && resData.data.cuisine_name[0] !== '') {
            wx.showModal({
              title: '提示',
              content: resData.data.cuisine_name[0]
            })
          }
          try {
            await this.$store.dispatch('initCuisine')
            this.$app.$options.globalData.cuisineList = this.cuisineList.slice()
          } catch (err) {
            console.error(err)
          }
        } catch (err) {
          console.error(err)
        }
      }
      this.addCuisineModalShow = false
    },
    addRecipe (e) {
      console.log(e)
      wx.navigateTo({
        url: '/pages/add_recipe'
      });
    },
    stepperChange (e) {
      console.log(e)
    },
    selectCuisine(e) {
      const index = e.currentTarget.id;

      // 先将所有元素的 active 设置为 false
      this.cuisineList.forEach((cuisine, i) => {
        this.$set(this.cuisineList, i, { ...cuisine, active: false });
      });

      // 再将指定元素的 active 设置为 true
      this.$set(this.cuisineList, index, { ...this.cuisineList[index], active: true });
    },
  },

})
</script>

<config>
{
  navigationBarTitleText: '菜单',
  "usingComponents": {
    "van-search": "module:vant-weapp/dist/search/index",
    "van-button": "module:vant-weapp/dist/button/index",
    "van-stepper": "module:vant-weapp/dist/stepper/index",
    "van-goods-action": "module:vant-weapp/dist/goods-action/index",
    "van-goods-action-icon": "module:vant-weapp/dist/goods-action-icon/index",
    "van-goods-action-button": "module:vant-weapp/dist/goods-action-button/index",
    "van-field": "module:vant-weapp/dist/field/index"
  }
}
</config>